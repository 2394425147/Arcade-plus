//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\root\works\code\shadow-git\arcade-plus\Assets\Scripts\Aff\ArcaeaFileFormat.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Arcade.Aff {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class ArcaeaFileFormatLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Whitespace=1, LParen=2, RParen=3, LBrack=4, RBrack=5, LBrace=6, RBrace=7, 
		Comma=8, Semicolon=9, Word=10, Int=11, Float=12;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"Whitespace", "LParen", "RParen", "LBrack", "RBrack", "LBrace", "RBrace", 
		"Comma", "Semicolon", "UNDERLINE", "ALPHABET", "DIGITSTART", "ZERO", "DIGIT", 
		"DOT", "NEGATIVE", "Word", "Int", "Float"
	};


	public ArcaeaFileFormatLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ArcaeaFileFormatLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, "'('", "')'", "'['", "']'", "'{'", "'}'", "','", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Whitespace", "LParen", "RParen", "LBrack", "RBrack", "LBrace", 
		"RBrace", "Comma", "Semicolon", "Word", "Int", "Float"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ArcaeaFileFormat.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ArcaeaFileFormatLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\xE', 'j', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x5', '\xF', 'H', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\a', '\x12', 'R', '\n', '\x12', '\f', '\x12', '\xE', '\x12', 
		'U', '\v', '\x12', '\x3', '\x13', '\x5', '\x13', 'X', '\n', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', ']', '\n', '\x13', 
		'\f', '\x13', '\xE', '\x13', '`', '\v', '\x13', '\x5', '\x13', '\x62', 
		'\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x6', '\x14', 
		'g', '\n', '\x14', '\r', '\x14', '\xE', '\x14', 'h', '\x2', '\x2', '\x15', 
		'\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', 
		'\b', '\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', '\x2', '\x17', 
		'\x2', '\x19', '\x2', '\x1B', '\x2', '\x1D', '\x2', '\x1F', '\x2', '!', 
		'\x2', '#', '\f', '%', '\r', '\'', '\xE', '\x3', '\x2', '\x5', '\f', '\x2', 
		'\v', '\xF', '\"', '\"', '\x87', '\x87', '\xA2', '\xA2', '\x1682', '\x1682', 
		'\x2002', '\x200C', '\x202A', '\x202B', '\x2031', '\x2031', '\x2061', 
		'\x2061', '\x3002', '\x3002', '\x4', '\x2', '\x43', '\\', '\x63', '|', 
		'\x3', '\x2', '\x33', ';', '\x2', 'j', '\x2', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x13', '\x3', '\x2', '\x2', '\x2', '\x2', '#', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '%', '\x3', '\x2', '\x2', '\x2', '\x2', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\x3', ')', '\x3', '\x2', '\x2', '\x2', '\x5', '-', '\x3', 
		'\x2', '\x2', '\x2', '\a', '/', '\x3', '\x2', '\x2', '\x2', '\t', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\v', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\r', '\x35', '\x3', '\x2', '\x2', '\x2', '\xF', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x11', '\x39', '\x3', '\x2', '\x2', '\x2', '\x13', ';', 
		'\x3', '\x2', '\x2', '\x2', '\x15', '=', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x19', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x1B', '\x43', '\x3', '\x2', '\x2', '\x2', '\x1D', 'G', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', 'I', '\x3', '\x2', '\x2', '\x2', '!', 'K', 
		'\x3', '\x2', '\x2', '\x2', '#', 'M', '\x3', '\x2', '\x2', '\x2', '%', 
		'W', '\x3', '\x2', '\x2', '\x2', '\'', '\x63', '\x3', '\x2', '\x2', '\x2', 
		')', '*', '\t', '\x2', '\x2', '\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', 
		'+', ',', '\b', '\x2', '\x2', '\x2', ',', '\x4', '\x3', '\x2', '\x2', 
		'\x2', '-', '.', '\a', '*', '\x2', '\x2', '.', '\x6', '\x3', '\x2', '\x2', 
		'\x2', '/', '\x30', '\a', '+', '\x2', '\x2', '\x30', '\b', '\x3', '\x2', 
		'\x2', '\x2', '\x31', '\x32', '\a', ']', '\x2', '\x2', '\x32', '\n', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x34', '\a', '_', '\x2', '\x2', '\x34', 
		'\f', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\a', '}', '\x2', '\x2', 
		'\x36', '\xE', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\a', '\x7F', 
		'\x2', '\x2', '\x38', '\x10', '\x3', '\x2', '\x2', '\x2', '\x39', ':', 
		'\a', '.', '\x2', '\x2', ':', '\x12', '\x3', '\x2', '\x2', '\x2', ';', 
		'<', '\a', '=', '\x2', '\x2', '<', '\x14', '\x3', '\x2', '\x2', '\x2', 
		'=', '>', '\a', '\x61', '\x2', '\x2', '>', '\x16', '\x3', '\x2', '\x2', 
		'\x2', '?', '@', '\t', '\x3', '\x2', '\x2', '@', '\x18', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '\x42', '\t', '\x4', '\x2', '\x2', '\x42', '\x1A', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\a', '\x32', '\x2', '\x2', 
		'\x44', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x45', 'H', '\x5', '\x19', 
		'\r', '\x2', '\x46', 'H', '\x5', '\x1B', '\xE', '\x2', 'G', '\x45', '\x3', 
		'\x2', '\x2', '\x2', 'G', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', '\x1E', 
		'\x3', '\x2', '\x2', '\x2', 'I', 'J', '\a', '\x30', '\x2', '\x2', 'J', 
		' ', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\a', '/', '\x2', '\x2', 'L', 
		'\"', '\x3', '\x2', '\x2', '\x2', 'M', 'S', '\x5', '\x17', '\f', '\x2', 
		'N', 'R', '\x5', '\x15', '\v', '\x2', 'O', 'R', '\x5', '\x1D', '\xF', 
		'\x2', 'P', 'R', '\x5', '\x17', '\f', '\x2', 'Q', 'N', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', 'P', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'U', '\x3', '\x2', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'T', '\x3', '\x2', '\x2', '\x2', 'T', '$', '\x3', '\x2', '\x2', 
		'\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 'V', 'X', '\x5', '!', '\x11', 
		'\x2', 'W', 'V', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', '\x2', 
		'\x2', 'X', '\x61', '\x3', '\x2', '\x2', '\x2', 'Y', '\x62', '\x5', '\x1B', 
		'\xE', '\x2', 'Z', '^', '\x5', '\x19', '\r', '\x2', '[', ']', '\x5', '\x1D', 
		'\xF', '\x2', '\\', '[', '\x3', '\x2', '\x2', '\x2', ']', '`', '\x3', 
		'\x2', '\x2', '\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', '^', '_', 
		'\x3', '\x2', '\x2', '\x2', '_', '\x62', '\x3', '\x2', '\x2', '\x2', '`', 
		'^', '\x3', '\x2', '\x2', '\x2', '\x61', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'\x61', 'Z', '\x3', '\x2', '\x2', '\x2', '\x62', '&', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x64', '\x5', '%', '\x13', '\x2', '\x64', '\x66', '\x5', 
		'\x1F', '\x10', '\x2', '\x65', 'g', '\x5', '\x1D', '\xF', '\x2', '\x66', 
		'\x65', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\x3', '\x2', '\x2', '\x2', 
		'h', '\x66', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', 
		'\x2', 'i', '(', '\x3', '\x2', '\x2', '\x2', '\n', '\x2', 'G', 'Q', 'S', 
		'W', '^', '\x61', 'h', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Arcade.Aff
