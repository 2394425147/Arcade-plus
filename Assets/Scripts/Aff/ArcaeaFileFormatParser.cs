//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\root\works\code\shadow-git\arcade-plus\Assets\Scripts\Aff\ArcaeaFileFormat.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Arcade.Aff {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class ArcaeaFileFormatParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Whitespace=1, LParen=2, RParen=3, LBrack=4, RBrack=5, LBrace=6, RBrace=7, 
		Comma=8, Semicolon=9, Word=10, Int=11, Float=12;
	public const int
		RULE_value = 0, RULE_values = 1, RULE_event = 2, RULE_item = 3, RULE_subevents = 4, 
		RULE_segment = 5, RULE_body = 6, RULE_file = 7;
	public static readonly string[] ruleNames = {
		"value", "values", "event", "item", "subevents", "segment", "body", "file"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'('", "')'", "'['", "']'", "'{'", "'}'", "','", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Whitespace", "LParen", "RParen", "LBrack", "RBrack", "LBrace", 
		"RBrace", "Comma", "Semicolon", "Word", "Int", "Float"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ArcaeaFileFormat.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ArcaeaFileFormatParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ArcaeaFileFormatParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ArcaeaFileFormatParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ValueContext : ParserRuleContext {
		public ITerminalNode Word() { return GetToken(ArcaeaFileFormatParser.Word, 0); }
		public ITerminalNode Int() { return GetToken(ArcaeaFileFormatParser.Int, 0); }
		public ITerminalNode Float() { return GetToken(ArcaeaFileFormatParser.Float, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArcaeaFileFormatListener typedListener = listener as IArcaeaFileFormatListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArcaeaFileFormatListener typedListener = listener as IArcaeaFileFormatListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 0, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Word) | (1L << Int) | (1L << Float))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValuesContext : ParserRuleContext {
		public ITerminalNode LParen() { return GetToken(ArcaeaFileFormatParser.LParen, 0); }
		public ITerminalNode RParen() { return GetToken(ArcaeaFileFormatParser.RParen, 0); }
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(ArcaeaFileFormatParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(ArcaeaFileFormatParser.Comma, i);
		}
		public ValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArcaeaFileFormatListener typedListener = listener as IArcaeaFileFormatListener;
			if (typedListener != null) typedListener.EnterValues(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArcaeaFileFormatListener typedListener = listener as IArcaeaFileFormatListener;
			if (typedListener != null) typedListener.ExitValues(this);
		}
	}

	[RuleVersion(0)]
	public ValuesContext @values() {
		ValuesContext _localctx = new ValuesContext(Context, State);
		EnterRule(_localctx, 2, RULE_values);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18; Match(LParen);
			State = 27;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Word) | (1L << Int) | (1L << Float))) != 0)) {
				{
				State = 19; value();
				State = 24;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 20; Match(Comma);
					State = 21; value();
					}
					}
					State = 26;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 29; Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventContext : ParserRuleContext {
		public ValuesContext @values() {
			return GetRuleContext<ValuesContext>(0);
		}
		public ITerminalNode Word() { return GetToken(ArcaeaFileFormatParser.Word, 0); }
		public SubeventsContext subevents() {
			return GetRuleContext<SubeventsContext>(0);
		}
		public SegmentContext segment() {
			return GetRuleContext<SegmentContext>(0);
		}
		public EventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArcaeaFileFormatListener typedListener = listener as IArcaeaFileFormatListener;
			if (typedListener != null) typedListener.EnterEvent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArcaeaFileFormatListener typedListener = listener as IArcaeaFileFormatListener;
			if (typedListener != null) typedListener.ExitEvent(this);
		}
	}

	[RuleVersion(0)]
	public EventContext @event() {
		EventContext _localctx = new EventContext(Context, State);
		EnterRule(_localctx, 4, RULE_event);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Word) {
				{
				State = 31; Match(Word);
				}
			}

			State = 34; @values();
			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBrack) {
				{
				State = 35; subevents();
				}
			}

			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBrace) {
				{
				State = 38; segment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemContext : ParserRuleContext {
		public EventContext @event() {
			return GetRuleContext<EventContext>(0);
		}
		public ITerminalNode Semicolon() { return GetToken(ArcaeaFileFormatParser.Semicolon, 0); }
		public ItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArcaeaFileFormatListener typedListener = listener as IArcaeaFileFormatListener;
			if (typedListener != null) typedListener.EnterItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArcaeaFileFormatListener typedListener = listener as IArcaeaFileFormatListener;
			if (typedListener != null) typedListener.ExitItem(this);
		}
	}

	[RuleVersion(0)]
	public ItemContext item() {
		ItemContext _localctx = new ItemContext(Context, State);
		EnterRule(_localctx, 6, RULE_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41; @event();
			State = 42; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubeventsContext : ParserRuleContext {
		public ITerminalNode LBrack() { return GetToken(ArcaeaFileFormatParser.LBrack, 0); }
		public ITerminalNode RBrack() { return GetToken(ArcaeaFileFormatParser.RBrack, 0); }
		public EventContext[] @event() {
			return GetRuleContexts<EventContext>();
		}
		public EventContext @event(int i) {
			return GetRuleContext<EventContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(ArcaeaFileFormatParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(ArcaeaFileFormatParser.Comma, i);
		}
		public SubeventsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subevents; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArcaeaFileFormatListener typedListener = listener as IArcaeaFileFormatListener;
			if (typedListener != null) typedListener.EnterSubevents(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArcaeaFileFormatListener typedListener = listener as IArcaeaFileFormatListener;
			if (typedListener != null) typedListener.ExitSubevents(this);
		}
	}

	[RuleVersion(0)]
	public SubeventsContext subevents() {
		SubeventsContext _localctx = new SubeventsContext(Context, State);
		EnterRule(_localctx, 8, RULE_subevents);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44; Match(LBrack);
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LParen || _la==Word) {
				{
				State = 45; @event();
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 46; Match(Comma);
					State = 47; @event();
					}
					}
					State = 52;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 55; Match(RBrack);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SegmentContext : ParserRuleContext {
		public ITerminalNode LBrace() { return GetToken(ArcaeaFileFormatParser.LBrace, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(ArcaeaFileFormatParser.RBrace, 0); }
		public SegmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_segment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArcaeaFileFormatListener typedListener = listener as IArcaeaFileFormatListener;
			if (typedListener != null) typedListener.EnterSegment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArcaeaFileFormatListener typedListener = listener as IArcaeaFileFormatListener;
			if (typedListener != null) typedListener.ExitSegment(this);
		}
	}

	[RuleVersion(0)]
	public SegmentContext segment() {
		SegmentContext _localctx = new SegmentContext(Context, State);
		EnterRule(_localctx, 10, RULE_segment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57; Match(LBrace);
			State = 58; body();
			State = 59; Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public ItemContext[] item() {
			return GetRuleContexts<ItemContext>();
		}
		public ItemContext item(int i) {
			return GetRuleContext<ItemContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArcaeaFileFormatListener typedListener = listener as IArcaeaFileFormatListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArcaeaFileFormatListener typedListener = listener as IArcaeaFileFormatListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 12, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LParen || _la==Word) {
				{
				{
				State = 61; item();
				}
				}
				State = 66;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileContext : ParserRuleContext {
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(ArcaeaFileFormatParser.Eof, 0); }
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			IArcaeaFileFormatListener typedListener = listener as IArcaeaFileFormatListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IArcaeaFileFormatListener typedListener = listener as IArcaeaFileFormatListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 14, RULE_file);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67; body();
			State = 68; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xE', 'I', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x19', '\n', '\x3', '\f', 
		'\x3', '\xE', '\x3', '\x1C', '\v', '\x3', '\x5', '\x3', '\x1E', '\n', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x5', '\x4', '#', '\n', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\'', '\n', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '*', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 
		'\x33', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x36', '\v', '\x6', '\x5', 
		'\x6', '\x38', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\a', '\b', '\x41', '\n', 
		'\b', '\f', '\b', '\xE', '\b', '\x44', '\v', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x2', '\x2', '\n', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x2', '\x3', '\x3', '\x2', '\f', '\xE', 
		'\x2', 'H', '\x2', '\x12', '\x3', '\x2', '\x2', '\x2', '\x4', '\x14', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\"', '\x3', '\x2', '\x2', '\x2', '\b', 
		'+', '\x3', '\x2', '\x2', '\x2', '\n', '.', '\x3', '\x2', '\x2', '\x2', 
		'\f', ';', '\x3', '\x2', '\x2', '\x2', '\xE', '\x42', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x45', '\x3', '\x2', '\x2', '\x2', '\x12', '\x13', '\t', 
		'\x2', '\x2', '\x2', '\x13', '\x3', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x1D', '\a', '\x4', '\x2', '\x2', '\x15', '\x1A', '\x5', '\x2', '\x2', 
		'\x2', '\x16', '\x17', '\a', '\n', '\x2', '\x2', '\x17', '\x19', '\x5', 
		'\x2', '\x2', '\x2', '\x18', '\x16', '\x3', '\x2', '\x2', '\x2', '\x19', 
		'\x1C', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1E', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1D', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\a', 
		'\x5', '\x2', '\x2', ' ', '\x5', '\x3', '\x2', '\x2', '\x2', '!', '#', 
		'\a', '\f', '\x2', '\x2', '\"', '!', '\x3', '\x2', '\x2', '\x2', '\"', 
		'#', '\x3', '\x2', '\x2', '\x2', '#', '$', '\x3', '\x2', '\x2', '\x2', 
		'$', '&', '\x5', '\x4', '\x3', '\x2', '%', '\'', '\x5', '\n', '\x6', '\x2', 
		'&', '%', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\'', ')', '\x3', '\x2', '\x2', '\x2', '(', '*', '\x5', '\f', '\a', 
		'\x2', ')', '(', '\x3', '\x2', '\x2', '\x2', ')', '*', '\x3', '\x2', '\x2', 
		'\x2', '*', '\a', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x5', '\x6', 
		'\x4', '\x2', ',', '-', '\a', '\v', '\x2', '\x2', '-', '\t', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x37', '\a', '\x6', '\x2', '\x2', '/', '\x34', '\x5', 
		'\x6', '\x4', '\x2', '\x30', '\x31', '\a', '\n', '\x2', '\x2', '\x31', 
		'\x33', '\x5', '\x6', '\x4', '\x2', '\x32', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x36', '\x3', '\x2', '\x2', '\x2', '\x34', '\x32', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x38', '\x3', '\x2', '\x2', '\x2', '\x36', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '/', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x39', '\x3', '\x2', '\x2', '\x2', '\x39', 
		':', '\a', '\a', '\x2', '\x2', ':', '\v', '\x3', '\x2', '\x2', '\x2', 
		';', '<', '\a', '\b', '\x2', '\x2', '<', '=', '\x5', '\xE', '\b', '\x2', 
		'=', '>', '\a', '\t', '\x2', '\x2', '>', '\r', '\x3', '\x2', '\x2', '\x2', 
		'?', '\x41', '\x5', '\b', '\x5', '\x2', '@', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x44', '\x3', '\x2', '\x2', '\x2', '\x42', '@', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x43', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x44', '\x42', '\x3', '\x2', '\x2', 
		'\x2', '\x45', '\x46', '\x5', '\xE', '\b', '\x2', '\x46', 'G', '\a', '\x2', 
		'\x2', '\x3', 'G', '\x11', '\x3', '\x2', '\x2', '\x2', '\n', '\x1A', '\x1D', 
		'\"', '&', ')', '\x34', '\x37', '\x42',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Arcade.Aff
