//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/ArcadeInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Arcade.Compose
{
    public partial class @AdeInputControl : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @AdeInputControl()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""ArcadeInput"",
    ""maps"": [
        {
            ""name"": ""Arcade Hotkey"",
            ""id"": ""cd950ed4-bcec-4ef6-b1f8-1c8be8aefa42"",
            ""actions"": [
                {
                    ""name"": ""Save"",
                    ""type"": ""Button"",
                    ""id"": ""27bfa70c-3b88-47aa-a92c-9bb0cec59a16"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Undo"",
                    ""type"": ""Button"",
                    ""id"": ""889fa30d-eb57-4857-a956-de96e730ca3f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Redo"",
                    ""type"": ""Button"",
                    ""id"": ""c1156be1-7d46-4c8a-9d2e-5e910052e63e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Copy"",
                    ""type"": ""Button"",
                    ""id"": ""a7d9cd85-ea2c-45a0-9812-27af8acb48a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cut"",
                    ""type"": ""Button"",
                    ""id"": ""67028a87-7bf3-4fad-9f23-31c19e973a4b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Delete"",
                    ""type"": ""Button"",
                    ""id"": ""f3ce9796-e49b-4cab-8260-359961eff90f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Play When Holding"",
                    ""type"": ""Button"",
                    ""id"": ""906c56a2-3584-45c7-a679-d656873a9e8f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Play Or Pause"",
                    ""type"": ""Button"",
                    ""id"": ""9ec2475b-e083-4ab6-9137-f1e1c2db9746"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""f71ea1f3-0675-4b96-ae2b-3141525fedca"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Save"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Modifier"",
                    ""id"": ""79658c04-918d-44ac-96f9-9b666f6710d8"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Save"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Binding"",
                    ""id"": ""aefe43ed-e080-4c4e-9227-8fae1b384d59"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Save"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""ef385b77-265f-4555-acbd-67d6b142b018"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Copy"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""c0817fb1-2434-47a4-9586-fcea6c79b289"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Copy"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""13600e59-a551-4b46-b56f-a672a48e92c6"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Copy"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""b98cdf0c-4ced-4b51-b5e9-3d6c05a52023"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cut"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""b0e7ebe1-2483-418c-9ab6-48abb6340c3f"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""4fcfb124-2ff4-4dd3-b278-8663e97c8e84"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""ad265ab8-6676-44cc-b715-484b855241fc"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Undo"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Modifier"",
                    ""id"": ""d19523e7-6ddc-4480-899f-2d6d38ed25e5"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Undo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Binding"",
                    ""id"": ""02089682-7ff6-4377-bcfd-3aa33b25b4fc"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Undo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""c4417cf8-827e-443d-aaff-f8db2403aa65"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Redo"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Modifier"",
                    ""id"": ""ce1bfcdd-92e0-46ca-962b-d3eadcea9265"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Redo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Binding"",
                    ""id"": ""a0fd6665-6ffc-46be-b5db-329ebcb3c8a0"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Redo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a4440d87-b945-4619-b003-f4744f76710f"",
                    ""path"": ""<Keyboard>/delete"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Delete"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0921c6b1-d9ae-4c5a-a286-a9efc6771f08"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Play When Holding"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8daa87c-6949-429a-9aeb-b8b5f432744a"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Play Or Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Arcade Input"",
            ""id"": ""dfc1fc89-02b1-4e85-9598-9b1f3b504fb6"",
            ""actions"": [
                {
                    ""name"": ""Multiple Selection"",
                    ""type"": ""Button"",
                    ""id"": ""75a55bcc-6ccf-43d4-a9d1-b53e1e2cf773"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Range Selection"",
                    ""type"": ""Button"",
                    ""id"": ""2982c6a7-fc16-4a6a-ad91-8a0de0d23d34"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2e5ec33d-b969-4ccc-a8d9-07dbb5cb2f32"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Multiple Selection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62702fd1-0687-431e-a718-529266c2c563"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Range Selection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Arcade Hotkey
            m_ArcadeHotkey = asset.FindActionMap("Arcade Hotkey", throwIfNotFound: true);
            m_ArcadeHotkey_Save = m_ArcadeHotkey.FindAction("Save", throwIfNotFound: true);
            m_ArcadeHotkey_Undo = m_ArcadeHotkey.FindAction("Undo", throwIfNotFound: true);
            m_ArcadeHotkey_Redo = m_ArcadeHotkey.FindAction("Redo", throwIfNotFound: true);
            m_ArcadeHotkey_Copy = m_ArcadeHotkey.FindAction("Copy", throwIfNotFound: true);
            m_ArcadeHotkey_Cut = m_ArcadeHotkey.FindAction("Cut", throwIfNotFound: true);
            m_ArcadeHotkey_Delete = m_ArcadeHotkey.FindAction("Delete", throwIfNotFound: true);
            m_ArcadeHotkey_PlayWhenHolding = m_ArcadeHotkey.FindAction("Play When Holding", throwIfNotFound: true);
            m_ArcadeHotkey_PlayOrPause = m_ArcadeHotkey.FindAction("Play Or Pause", throwIfNotFound: true);
            // Arcade Input
            m_ArcadeInput = asset.FindActionMap("Arcade Input", throwIfNotFound: true);
            m_ArcadeInput_MultipleSelection = m_ArcadeInput.FindAction("Multiple Selection", throwIfNotFound: true);
            m_ArcadeInput_RangeSelection = m_ArcadeInput.FindAction("Range Selection", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Arcade Hotkey
        private readonly InputActionMap m_ArcadeHotkey;
        private IArcadeHotkeyActions m_ArcadeHotkeyActionsCallbackInterface;
        private readonly InputAction m_ArcadeHotkey_Save;
        private readonly InputAction m_ArcadeHotkey_Undo;
        private readonly InputAction m_ArcadeHotkey_Redo;
        private readonly InputAction m_ArcadeHotkey_Copy;
        private readonly InputAction m_ArcadeHotkey_Cut;
        private readonly InputAction m_ArcadeHotkey_Delete;
        private readonly InputAction m_ArcadeHotkey_PlayWhenHolding;
        private readonly InputAction m_ArcadeHotkey_PlayOrPause;
        public struct ArcadeHotkeyActions
        {
            private @AdeInputControl m_Wrapper;
            public ArcadeHotkeyActions(@AdeInputControl wrapper) { m_Wrapper = wrapper; }
            public InputAction @Save => m_Wrapper.m_ArcadeHotkey_Save;
            public InputAction @Undo => m_Wrapper.m_ArcadeHotkey_Undo;
            public InputAction @Redo => m_Wrapper.m_ArcadeHotkey_Redo;
            public InputAction @Copy => m_Wrapper.m_ArcadeHotkey_Copy;
            public InputAction @Cut => m_Wrapper.m_ArcadeHotkey_Cut;
            public InputAction @Delete => m_Wrapper.m_ArcadeHotkey_Delete;
            public InputAction @PlayWhenHolding => m_Wrapper.m_ArcadeHotkey_PlayWhenHolding;
            public InputAction @PlayOrPause => m_Wrapper.m_ArcadeHotkey_PlayOrPause;
            public InputActionMap Get() { return m_Wrapper.m_ArcadeHotkey; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ArcadeHotkeyActions set) { return set.Get(); }
            public void SetCallbacks(IArcadeHotkeyActions instance)
            {
                if (m_Wrapper.m_ArcadeHotkeyActionsCallbackInterface != null)
                {
                    @Save.started -= m_Wrapper.m_ArcadeHotkeyActionsCallbackInterface.OnSave;
                    @Save.performed -= m_Wrapper.m_ArcadeHotkeyActionsCallbackInterface.OnSave;
                    @Save.canceled -= m_Wrapper.m_ArcadeHotkeyActionsCallbackInterface.OnSave;
                    @Undo.started -= m_Wrapper.m_ArcadeHotkeyActionsCallbackInterface.OnUndo;
                    @Undo.performed -= m_Wrapper.m_ArcadeHotkeyActionsCallbackInterface.OnUndo;
                    @Undo.canceled -= m_Wrapper.m_ArcadeHotkeyActionsCallbackInterface.OnUndo;
                    @Redo.started -= m_Wrapper.m_ArcadeHotkeyActionsCallbackInterface.OnRedo;
                    @Redo.performed -= m_Wrapper.m_ArcadeHotkeyActionsCallbackInterface.OnRedo;
                    @Redo.canceled -= m_Wrapper.m_ArcadeHotkeyActionsCallbackInterface.OnRedo;
                    @Copy.started -= m_Wrapper.m_ArcadeHotkeyActionsCallbackInterface.OnCopy;
                    @Copy.performed -= m_Wrapper.m_ArcadeHotkeyActionsCallbackInterface.OnCopy;
                    @Copy.canceled -= m_Wrapper.m_ArcadeHotkeyActionsCallbackInterface.OnCopy;
                    @Cut.started -= m_Wrapper.m_ArcadeHotkeyActionsCallbackInterface.OnCut;
                    @Cut.performed -= m_Wrapper.m_ArcadeHotkeyActionsCallbackInterface.OnCut;
                    @Cut.canceled -= m_Wrapper.m_ArcadeHotkeyActionsCallbackInterface.OnCut;
                    @Delete.started -= m_Wrapper.m_ArcadeHotkeyActionsCallbackInterface.OnDelete;
                    @Delete.performed -= m_Wrapper.m_ArcadeHotkeyActionsCallbackInterface.OnDelete;
                    @Delete.canceled -= m_Wrapper.m_ArcadeHotkeyActionsCallbackInterface.OnDelete;
                    @PlayWhenHolding.started -= m_Wrapper.m_ArcadeHotkeyActionsCallbackInterface.OnPlayWhenHolding;
                    @PlayWhenHolding.performed -= m_Wrapper.m_ArcadeHotkeyActionsCallbackInterface.OnPlayWhenHolding;
                    @PlayWhenHolding.canceled -= m_Wrapper.m_ArcadeHotkeyActionsCallbackInterface.OnPlayWhenHolding;
                    @PlayOrPause.started -= m_Wrapper.m_ArcadeHotkeyActionsCallbackInterface.OnPlayOrPause;
                    @PlayOrPause.performed -= m_Wrapper.m_ArcadeHotkeyActionsCallbackInterface.OnPlayOrPause;
                    @PlayOrPause.canceled -= m_Wrapper.m_ArcadeHotkeyActionsCallbackInterface.OnPlayOrPause;
                }
                m_Wrapper.m_ArcadeHotkeyActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Save.started += instance.OnSave;
                    @Save.performed += instance.OnSave;
                    @Save.canceled += instance.OnSave;
                    @Undo.started += instance.OnUndo;
                    @Undo.performed += instance.OnUndo;
                    @Undo.canceled += instance.OnUndo;
                    @Redo.started += instance.OnRedo;
                    @Redo.performed += instance.OnRedo;
                    @Redo.canceled += instance.OnRedo;
                    @Copy.started += instance.OnCopy;
                    @Copy.performed += instance.OnCopy;
                    @Copy.canceled += instance.OnCopy;
                    @Cut.started += instance.OnCut;
                    @Cut.performed += instance.OnCut;
                    @Cut.canceled += instance.OnCut;
                    @Delete.started += instance.OnDelete;
                    @Delete.performed += instance.OnDelete;
                    @Delete.canceled += instance.OnDelete;
                    @PlayWhenHolding.started += instance.OnPlayWhenHolding;
                    @PlayWhenHolding.performed += instance.OnPlayWhenHolding;
                    @PlayWhenHolding.canceled += instance.OnPlayWhenHolding;
                    @PlayOrPause.started += instance.OnPlayOrPause;
                    @PlayOrPause.performed += instance.OnPlayOrPause;
                    @PlayOrPause.canceled += instance.OnPlayOrPause;
                }
            }
        }
        public ArcadeHotkeyActions @ArcadeHotkey => new ArcadeHotkeyActions(this);

        // Arcade Input
        private readonly InputActionMap m_ArcadeInput;
        private IArcadeInputActions m_ArcadeInputActionsCallbackInterface;
        private readonly InputAction m_ArcadeInput_MultipleSelection;
        private readonly InputAction m_ArcadeInput_RangeSelection;
        public struct ArcadeInputActions
        {
            private @AdeInputControl m_Wrapper;
            public ArcadeInputActions(@AdeInputControl wrapper) { m_Wrapper = wrapper; }
            public InputAction @MultipleSelection => m_Wrapper.m_ArcadeInput_MultipleSelection;
            public InputAction @RangeSelection => m_Wrapper.m_ArcadeInput_RangeSelection;
            public InputActionMap Get() { return m_Wrapper.m_ArcadeInput; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ArcadeInputActions set) { return set.Get(); }
            public void SetCallbacks(IArcadeInputActions instance)
            {
                if (m_Wrapper.m_ArcadeInputActionsCallbackInterface != null)
                {
                    @MultipleSelection.started -= m_Wrapper.m_ArcadeInputActionsCallbackInterface.OnMultipleSelection;
                    @MultipleSelection.performed -= m_Wrapper.m_ArcadeInputActionsCallbackInterface.OnMultipleSelection;
                    @MultipleSelection.canceled -= m_Wrapper.m_ArcadeInputActionsCallbackInterface.OnMultipleSelection;
                    @RangeSelection.started -= m_Wrapper.m_ArcadeInputActionsCallbackInterface.OnRangeSelection;
                    @RangeSelection.performed -= m_Wrapper.m_ArcadeInputActionsCallbackInterface.OnRangeSelection;
                    @RangeSelection.canceled -= m_Wrapper.m_ArcadeInputActionsCallbackInterface.OnRangeSelection;
                }
                m_Wrapper.m_ArcadeInputActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @MultipleSelection.started += instance.OnMultipleSelection;
                    @MultipleSelection.performed += instance.OnMultipleSelection;
                    @MultipleSelection.canceled += instance.OnMultipleSelection;
                    @RangeSelection.started += instance.OnRangeSelection;
                    @RangeSelection.performed += instance.OnRangeSelection;
                    @RangeSelection.canceled += instance.OnRangeSelection;
                }
            }
        }
        public ArcadeInputActions @ArcadeInput => new ArcadeInputActions(this);
        public interface IArcadeHotkeyActions
        {
            void OnSave(InputAction.CallbackContext context);
            void OnUndo(InputAction.CallbackContext context);
            void OnRedo(InputAction.CallbackContext context);
            void OnCopy(InputAction.CallbackContext context);
            void OnCut(InputAction.CallbackContext context);
            void OnDelete(InputAction.CallbackContext context);
            void OnPlayWhenHolding(InputAction.CallbackContext context);
            void OnPlayOrPause(InputAction.CallbackContext context);
        }
        public interface IArcadeInputActions
        {
            void OnMultipleSelection(InputAction.CallbackContext context);
            void OnRangeSelection(InputAction.CallbackContext context);
        }
    }
}
